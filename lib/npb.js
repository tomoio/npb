// Generated by CoffeeScript 1.3.3
(function() {
  var NPB, async, beautifyjs, fs, hbs, path, touch, v, _, _ref;

  _ref = (function() {
    var _i, _len, _ref, _results;
    _ref = ['async', 'path', 'fs', 'beautifyjs', 'touch', 'handlebars', 'underscore'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(require(v));
    }
    return _results;
  })(), async = _ref[0], path = _ref[1], fs = _ref[2], beautifyjs = _ref[3], touch = _ref[4], hbs = _ref[5], _ = _ref[6];

  module.exports = NPB = (function() {

    function NPB(root, opts, callback) {
      var config, _ref1, _ref2, _ref3,
        _this = this;
      this.root = root != null ? root : process.cwd();
      this.opts = opts != null ? opts : {};
      this.callback = callback != null ? callback : null;
      if (this.opts.configFile) {
        config = this.readConfigFile();
        if (config !== false) {
          this.opts = _.extend(config, this.opts);
        }
      }
      this.bin = this.opts.bin;
      this.basename = path.basename(this.root);
      this.projectTitle = (_ref1 = this.opts.projectTitle) != null ? _ref1 : this.basename;
      this.description = (_ref2 = this.opts.description) != null ? _ref2 : 'A node module.';
      this.version = (_ref3 = this.opts.version) != null ? _ref3 : '0.0.1';
      this.author = this.opts.author;
      this.email = this.opts.email;
      this.url = this.opts.url;
      this.githubName = this.opts.githubName;
      this.templates = {};
      fs.mkdir(this.root, function(err) {
        return _this.mkdir();
      });
      this.GITIGNORE = ['lib-cov', '*.seed', '*.log', '*.csv', '*.dat', '*.out', '*.pid', '*.gz', '', 'pids', 'logs', 'results', '', 'node_modules', 'npm-debug.log'];
      this.MAKEFILE = ["test:", "\t./node_modules/.bin/mocha ./test/*.coffee --compilers coffee:coffee-script -R spec", ".PHONY: test"];
      this.PACKAGE_JSON = {
        "name": this.basename.toLowerCase(),
        "version": this.version,
        "description": this.description,
        "keywords": [],
        "bugs": {
          "url": "https://github.com/" + this.githubName + "/" + this.basename + "/issues"
        },
        "main": "./lib/" + this.basename,
        "directories": {
          "lib": "./lib",
          "doc": "./docs"
        },
        "repository": {
          "type": "git",
          "url": "https://github.com/" + this.githubName + "/" + this.basename
        },
        "dependencies": {},
        "devDependencies": {
          "coffee-script": "",
          "mocha": "",
          "chai": ""
        }
      };
      if ((this.opts.author != null) || (this.opts.emai != null) || (this.opts.url != null)) {
        this.PACKAGE_JSON.author = {};
        if (this.opts.author != null) {
          this.PACKAGE_JSON.author.name = this.opts.author;
        }
        if (this.opts.email != null) {
          this.PACKAGE_JSON.author.email = this.opts.email;
        }
        if (this.opts.url != null) {
          this.PACKAGE_JSON.author.url = this.opts.url;
        }
      }
      if (this.bin) {
        this.PACKAGE_JSON.bin = "./bin/" + this.basename;
        this.PACKAGE_JSON.directories.bin = "./bin";
        this.PACKAGE_JSON.dependencies.commander = "*";
      }
      this.BYSTANDER = {
        "ignore": ["**/node_modules", "**/.", "**/assets", "**/test/tmp"],
        "plugins": ["by-coffeescript", "by-write2js", "by-coffeelint", "by-docco", "by-mocha"],
        "by": {
          "coffeescript": {
            "noCompile": ["**/test/*"]
          },
          "write2js": {
            "bin": true,
            "mapper": {
              "**/src/*": ["/src/", "/lib/"]
            }
          },
          "docco": {
            "doccoSources": ["src/*.coffee"]
          },
          "mocha": {
            "testPaths": ["test/*.coffee"]
          }
        }
      };
    }

    NPB.prototype.readConfigFile = function() {
      try {
        return JSON.parse(fs.readFileSync(this.opts.configFile, 'utf8'));
      } catch (e) {
        return false;
      }
    };

    NPB.prototype.mkdir = function() {
      var dirs, extra, _i, _len,
        _this = this;
      dirs = ['src', 'docs', 'test', 'lib'];
      extra = ['bin', 'assets'];
      for (_i = 0, _len = extra.length; _i < _len; _i++) {
        v = extra[_i];
        if (this.opts[v] != null) {
          dirs.push(v);
        }
      }
      return async.forEach(dirs, function(v, callback) {
        return fs.mkdir(path.join(_this.root, v), function(err) {
          return callback();
        });
      }, function(cb) {
        return _this.getTemplates();
      });
    };

    NPB.prototype.write = function() {
      var bars, files, _i, _len, _ref1,
        _this = this;
      files = [];
      files.push({
        body: this.GITIGNORE.join('\n'),
        filename: '.gitignore'
      });
      files.push({
        body: this.MAKEFILE.join('\n'),
        filename: 'Makefile'
      });
      files.push({
        body: beautifyjs.js_beautify(JSON.stringify(this.PACKAGE_JSON), {
          indent_size: 2
        }),
        filename: 'package.json'
      });
      files.push({
        body: beautifyjs.js_beautify(JSON.stringify(this.BYSTANDER), {
          indent_size: 2
        }),
        filename: '.bystander'
      });
      files.push({
        body: this.templates['LICENSE']({
          author: this.author,
          email: this.email,
          url: this.url,
          projectTitle: this.projectTitle
        }),
        filename: 'LICENSE'
      });
      bars = [];
      _ref1 = this.projectTitle;
      for (_i = 0, _len = _ref1.length; _i < _len; _i++) {
        v = _ref1[_i];
        bars.push('=');
      }
      files.push({
        body: this.templates['README']({
          description: this.description,
          projectTitle: this.projectTitle,
          bars: bars.join('')
        }),
        filename: 'README.md'
      });
      return async.forEach(files, function(v, callback) {
        return fs.writeFile(path.join(_this.root, v.filename), v.body, function(err) {
          return callback();
        });
      }, function() {
        return _this.touchFiles();
      });
    };

    NPB.prototype.getTemplates = function() {
      var files,
        _this = this;
      files = ['LICENSE', 'README'];
      return async.forEach(files, function(v, callback) {
        return fs.readFile(path.join(__dirname, "../assets/" + v + ".hbs"), 'utf8', function(err, body) {
          _this.templates[v] = hbs.compile(body);
          return callback();
        });
      }, function() {
        return _this.write();
      });
    };

    NPB.prototype.touchFiles = function() {
      var files,
        _this = this;
      files = [path.join(this.root, "src/" + this.basename + ".coffee"), path.join(this.root, "test/test." + this.basename + ".coffee")];
      if (this.bin) {
        files.push(path.join(this.root, "bin/" + this.basename));
      }
      return async.forEach(files, function(v, callback) {
        return touch(v, function() {
          return callback();
        });
      }, function() {
        return _this.chmod();
      });
    };

    NPB.prototype.chmod = function() {
      var _this = this;
      if (this.bin) {
        return fs.chmod(path.join(this.root, "bin/" + this.basename), '755', function() {
          return _this.exit();
        });
      } else {
        return this.exit();
      }
    };

    NPB.prototype.exit = function() {
      if (this.callback != null) {
        return this.callback();
      } else {
        return process.exit();
      }
    };

    return NPB;

  })();

}).call(this);
