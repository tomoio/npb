// Generated by CoffeeScript 1.3.3
(function() {
  var NPB, async, beautifyjs, fs, path, touch, v, _ref;

  _ref = (function() {
    var _i, _len, _ref, _results;
    _ref = ['async', 'path', 'fs', 'beautifyjs', 'touch'];
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      v = _ref[_i];
      _results.push(require(v));
    }
    return _results;
  })(), async = _ref[0], path = _ref[1], fs = _ref[2], beautifyjs = _ref[3], touch = _ref[4];

  console.log(touch);

  module.exports = NPB = (function() {

    function NPB(root, opts) {
      var _ref1, _ref2,
        _this = this;
      this.root = root != null ? root : process.cwd();
      this.opts = opts != null ? opts : {};
      this.basename = path.basename(this.root);
      this.projectTitle = (_ref1 = this.opts.projectitle) != null ? _ref1 : this.basename;
      this.description = (_ref2 = this.opts.description) != null ? _ref2 : 'A node module.';
      fs.mkdir(this.root, function(err) {
        return _this.mkdir();
      });
      this.GITIGNORE = ['lib-cov', '*.seed', '*.log', '*.csv', '*.dat', '*.out', '*.pid', '*.gz', '', 'pids', 'logs', 'results', '', 'node_modules', 'npm-debug.log'];
      this.MAKEFILE = ['test:', '  ./node_modules/.bin/mocha ./test/*.coffee --compilers coffee:coffee-script -R spec', '.PHONY: test'];
      this.PACKAGE_JSON = {
        "name": this.basename,
        "version": "0.0.1",
        "description": this.description,
        "keywords": [],
        "bugs": {
          "url": "https://github.com/tomoio/" + this.basename + "/issues"
        },
        "author": {
          "name": "Tomo I/O",
          "email": "711@tomo.io",
          "url": "http://tomo.io"
        },
        "main": "./lib/" + this.basename,
        "directories": {
          "lib": "./lib",
          "doc": "./docs"
        },
        "repository": {
          "type": "git",
          "url": "https://github.com/tomoio/" + this.basename
        },
        "dependencies": {},
        "devDependencies": {
          "coffee-script": "",
          "mocha": "",
          "chai": ""
        }
      };
      if (this.opts.bin) {
        this.PACKAGE_JSON.bin = "./bin/" + this.basename;
        this.PACKAGE_JSON.directories.bin = "./bin";
        this.PACKAGE_JSON.dependencies.commander = "*";
      }
      this.BYSTANDER = {
        "ignore": ["**/node_modules", "**/.", "**/assets", "**/test/tmp"],
        "plugins": ["by-coffeescript", "by-write2js", "by-coffeelint", "by-docco", "by-mocha"],
        "by": {
          "coffeescript": {
            "noCompile": ["**/test/*"]
          },
          "write2js": {
            "bin": true,
            "mapper": {
              "**/src/*": ["/src/", "/lib/"]
            }
          },
          "docco": {
            "doccoSources": ["src/*.coffee"]
          },
          "mocha": {
            "testPaths": ["test/*.coffee"]
          }
        }
      };
    }

    NPB.prototype.mkdir = function() {
      var dirs, extra, _i, _len,
        _this = this;
      dirs = ['src', 'docs', 'test', 'lib'];
      extra = ['bin', 'assets'];
      for (_i = 0, _len = extra.length; _i < _len; _i++) {
        v = extra[_i];
        if (this.opts[v] != null) {
          dirs.push(v);
        }
      }
      return async.forEach(dirs, function(v, callback) {
        return fs.mkdir(path.join(_this.root, v), function(err) {
          console.log(err);
          return callback();
        });
      }, function(cb) {
        return _this.writeGitignore();
      });
    };

    NPB.prototype.writeGitignore = function() {
      var _this = this;
      return fs.writeFile(path.join(this.root, '.gitignore'), this.GITIGNORE.join('\n'), function(err) {
        console.log(err);
        console.log('fuckkkk');
        return _this.writeMakefile();
      });
    };

    NPB.prototype.writeMakefile = function() {
      var _this = this;
      return fs.writeFile(path.join(this.root, 'Makefile'), this.MAKEFILE.join('\n'), function(err) {
        console.log('mkfile');
        console.log(err);
        return _this.writePackageJson();
      });
    };

    NPB.prototype.writePackageJson = function() {
      var _this = this;
      return fs.writeFile(path.join(this.root, 'package.json'), beautifyjs.js_beautify(JSON.stringify(this.PACKAGE_JSON), {
        indent_size: 2
      }), function(err) {
        console.log('mkfile');
        console.log(err);
        return _this.writeBystander();
      });
    };

    NPB.prototype.writeBystander = function() {
      var _this = this;
      return fs.writeFile(path.join(this.root, '.bystander'), beautifyjs.js_beautify(JSON.stringify(this.BYSTANDER), {
        indent_size: 2
      }), function(err) {
        console.log('mkfile');
        return console.log(err);
      });
    };

    return NPB;

  })();

}).call(this);
